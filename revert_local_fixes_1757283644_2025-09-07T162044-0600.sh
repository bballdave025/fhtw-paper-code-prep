#!/usr/bin/env bash
#
# revert_local_fixes.sh — Undo apply_local_fixes.sh changes (best-effort, idempotent)
# Run from repo root.

set -euo pipefail

msg() { printf "\033[1;35m[revert]\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[warn]\033[0m %s\n" "$*"; }
fail() { printf "\033[1;31m[fail]\033[0m %s\n" "$*" >&2; exit 1; }

ROOT="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
cd "$ROOT"

TAGDIR="${TAGDIR:-$ROOT}"
TAG="${TAG:-$(basename "$TAGDIR")}"

msg "ROOT=$ROOT"
msg "TAG=$TAG"

# ---------- 1) structure.sh restore ----------
if [ -f "structure.sh" ]; then
  last_bak="$(ls -1t structure.sh.bak.* 2>/dev/null | head -n1 || true)"
  if [ -n "$last_bak" ]; then
    msg "Restoring structure.sh from $last_bak"
    cp -f "$last_bak" structure.sh
  else
    warn "No structure.sh.bak.* found; leaving structure.sh as-is."
  fi
else
  warn "No structure.sh present."
fi

# ---------- 2) remove placeholder notebook if ours ----------
NB="notebooks/02_training_${TAG}.ipynb"
if [ -f "$NB" ]; then
  if grep -q 'placeholder' "$NB" && grep -q 'apply_local_fixes.sh' "$NB"; then
    msg "Removing placeholder $NB"
    rm -f "$NB"
  else
    warn "$NB exists but does not look like our placeholder; leaving it."
  fi
fi

# ---------- 3) remove auto-generated py_utils if ours ----------
PY_UTIL="scripts/py_utils_${TAG}.py"
if [ -f "$PY_UTIL" ]; then
  if grep -q 'Auto-generated by apply_local_fixes.sh' "$PY_UTIL"; then
    msg "Removing auto-generated $PY_UTIL"
    rm -f "$PY_UTIL"
  else
    warn "$PY_UTIL exists but not auto-generated by our script; leaving it."
  fi
fi

# ---------- 4) remove helpers.sh if it contains our elapsed marker ----------
HELPERS="bin/helpers.sh"
if [ -f "$HELPERS" ]; then
  if grep -q '# --- helpers: elapsed timer & format' "$HELPERS"; then
    msg "Removing $HELPERS"
    rm -f "$HELPERS"
  else
    warn "$HELPERS exists but not our generated content; leaving it."
  fi
fi

# ---------- 5) remove safe_default_header.sh if wrapper or template ----------
SAFE_DEF="bin/safe_default_header.sh"
SAFE_LOCAL="bin/safe_local_header.sh"
if [ -f "$SAFE_DEF" ]; then
  if grep -q 'Wrapper: prefer developer-maintained local header' "$SAFE_DEF"; then
    msg "Removing wrapper $SAFE_DEF"
    rm -f "$SAFE_DEF"
  elif grep -q 'safe_default_header.sh — DEV-ONLY shell header (template)' "$SAFE_DEF"; then
    msg "Removing template $SAFE_DEF"
    rm -f "$SAFE_DEF"
  else
    warn "$SAFE_DEF exists but is neither our wrapper nor our template; leaving it."
  fi
fi

# (Never touch user's SAFE_LOCAL; it is developer-maintained.)

# ---------- 6) remove test script if ours ----------
TEST_SCRIPT="scripts/tests/test_elapsed_all.sh"
if [ -f "$TEST_SCRIPT" ]; then
  if head -n 3 "$TEST_SCRIPT" | grep -q 'scripts/tests/test_elapsed_all.sh — end-to-end tests'; then
    msg "Removing $TEST_SCRIPT"
    rm -f "$TEST_SCRIPT"
    # Clean up empty directory
    rmdir --ignore-fail-on-non-empty scripts/tests 2>/dev/null || true
    rmdir --ignore-fail-on-non-empty scripts 2>/dev/null || true
  else
    warn "$TEST_SCRIPT exists but does not match our header; leaving it."
  fi
fi

# ---------- 7) scrub Makefile target if we added it ----------
MAKEFILE="Makefile"
if [ -f "$MAKEFILE" ]; then
  # Only attempt removal if the exact phony line exists
  if grep -qE '^[.]PHONY:[[:space:]]*test-elapsed$' "$MAKEFILE"; then
    msg "Attempting to remove test-elapsed target from Makefile"
    tmp="$(mktemp)"
    awk '
      BEGIN {skip=0}
      # Detect start of our block
      /^\.[Pp][Hh][Oo][Nn][Yy]:[[:space:]]*test-elapsed$/ {skip=1; next}
      # While skipping, also skip the rule body (target line and its recipe)
      skip==1 && /^test-elapsed:$/ {next}
      skip==1 && /^[ \t]@bash[ \t]+scripts\/tests\/test_elapsed_all\.sh$/ {next}
      # Stop skipping when we hit a blank line or a new target definition
      skip==1 && /^[[:space:]]*$/ {skip=0; next}
      skip==1 && /^[a-zA-Z0-9_.-]+:/ {skip=0}   # fall through to print this line

      { if (skip==0) print $0 }
    ' "$MAKEFILE" > "$tmp"
    mv "$tmp" "$MAKEFILE"
  else
    msg "Makefile has no matching test-elapsed PHONY marker; leaving as-is."
  fi
else
  warn "No Makefile found."
fi

msg "Revert completed."
